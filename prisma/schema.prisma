// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  //output   = "./node_modules/.prisma/client"
  //  previewFeatures = ["referentialStringegrity"]
}

datasource db {
  provider     = "postgres"
  url      = env("DATABASE_URL")
   //relationMode ="prisma"
}
// datasource db {
//   provider = "sqlite"
//   url      = "file:./db.sqlite"
// }

model User {
  id           String             @id @default(uuid()) @map("_id")
  email        String
  name         String?
  username     String         @unique
  password     String
  profileImage String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RefreshToken RefreshToken[]
  //Tweet
  Tweet        Tweet[]
  mediaFiles   MediaFile[]
   @@index([username], name: "unique_username")
}

model RefreshToken {
  id        String       @id @default(uuid()) @map("_id")
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
   @@index([userId], name: "user_id_index")
}

model Tweet {
  id        String       @id @default(uuid()) @map("_id")
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //Author
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  replyToId String?
  replyTo   Tweet?   @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Tweet[]  @relation("replies")

  //media files
  mediaFiles MediaFile[]
  @@index([authorId]) // Add an index for the authorId field
   @@index([replyToId])
}

model MediaFile {
  id               String       @id @default(uuid()) @map("_id")
  url              String
  providerPublicId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  //Tweet
  tweetId          String?
  tweet            Tweet?   @relation(fields: [tweetId], references: [id])
   @@index([userId]) // Add an index for the userId field
  @@index([tweetId]) // Add an index for the tweetId field
}
