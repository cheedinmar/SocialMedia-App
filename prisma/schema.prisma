// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  //  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // relationMode ="primsa"
}

model User {
  id           Int            @id @default(autoincrement()) @map("_id")
  email        String
  name         String?
  username     String         @unique
  password     String
  profileImage String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RefreshToken RefreshToken[]
  //Tweet
  Tweet        Tweet[]
  mediaFiles   MediaFile[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement()) @map("_id")
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Tweet {
  id        Int      @id @default(autoincrement()) @map("_id")
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //Author
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  replyToId Int?
  replyTo   Tweet?   @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Tweet[]  @relation("replies")

  //media files
  mediaFiles MediaFile[]
}

model MediaFile {
  id               Int      @id @default(autoincrement()) @map("_id")
  url              String
  providerPublicId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           Int
  user             User     @relation(fields: [userId], references: [id])
  //Tweet
  tweetId          Int?
  tweet            Tweet?   @relation(fields: [tweetId], references: [id])
}
